<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <context id="MBG" targetRuntime="MyBatis3" defaultModelType="conditional">
        <!-- 注意以下标签的顺序:property*,plugin*,commentGenerator?,jdbcConnection,
                javaTypeResolver?,javaModelGenerator,sqlMapGenerator?,
                javaClientGenerator?,table+ -->

        <!-- 这个插件给由MBG生成的Java模型对象增加了equals和hashCode方法 -->
        <!--<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>-->
        <plugin type="cn.hiboot.crud.plugin.GenerateBaseMapperAndPagePlugin"/>
        <plugin type="cn.hiboot.crud.plugin.GenerateBaseServiceAndImplementPlugin">
            <property name="rootInterface" value="cn.hiboot.mcn.core.service.BaseService"/>
            <property name="service" value="org.springframework.stereotype.Service"/>
            <property name="targetProject" value="src/main/java"/>
            <property name="targetPackage" value="${service-package}"/>
            <property name="overwrite" value="${overwrite}"/>
        </plugin>
        <commentGenerator>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
            <!-- 不希望生成的注释中包含时间戳 -->
            <property name="suppressDate" value="true"/>
            <!-- 是否  自动为每一个生成的类创建一个构造方法-->
            <property name="constructorBased" value="false"/>
        </commentGenerator>
        <!-- 数据库连接 -->
        <jdbcConnection
                driverClass="${db.driver}"
                connectionURL="${db.url}"
                userId="${db.user}"
                password="${db.password}">
        </jdbcConnection>
        <!-- 指定生成的类型为java类型，避免数据库中number等类型字段 -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!-- 生成model模型，对应的包，存放位置可以指定具体的路径,如/ProjectName/src，也可以使用MAVEN来自动生成 -->
        <javaModelGenerator targetPackage="${bean-package}" targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="false"/>
            <property name="rootClass" value="cn.hiboot.mcn.core.model.BaseModel"/>
        </javaModelGenerator>
        <!--对应的xml mapper文件  -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>
        <!-- 对应的dao接口 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${dao-package}" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
            <property name="rootInterface" value="cn.hiboot.mcn.core.mapper.BaseMapper"/>
            <property name="repository" value="org.springframework.stereotype.Repository"/>
        </javaClientGenerator>

        <!-- 表名对应生成的实体 -->
        <table tableName="user" domainObjectName="UserBean" mapperName="UserMapper"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <!--<property name="useActualColumnNames" value="true"/>-->
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>

    </context>

</generatorConfiguration>